return {
    "prettier/vim-prettier",
    -- dependencies = {
    --     "sbdchd/neoformat"
    -- },
    config = function()
        -- format on save
        vim.cmd([[
            autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.svelte,*.yaml,*.html PrettierAsync
        ]])
        vim.g.prettier_autoformat = 1
        vim.g.prettier_autoformat_require_pragma = 1
        vim.g.prettier_quickfix_enabled = 0
        -- let g:prettier#autoformat_config_present = 1
        -- let g:prettier#autoformat_config_files = [...]
        -- vim.cmd([[let g:prettier#exec_cmd_path = $PRETTIER]])
        -- vim.cmd([[let g:neoformat_try_node_exe = 1]])
        -- vim.cmd([[let g:prettier#exec_cmd_async = 1]])
        -- " Max line length that prettier will wrap on: a number or 'auto' (use
        -- " textwidth).
        -- " default: 'auto'
        -- let g:prettier#config#print_width = 'auto'

        -- " number of spaces per indentation level: a number or 'auto' (use
        -- " softtabstop)
        -- " default: 'auto'
        -- let g:prettier#config#tab_width = 'auto'

        -- " use tabs instead of spaces: true, false, or auto (use the expandtab setting).
        -- " default: 'auto'
        -- let g:prettier#config#use_tabs = 'auto'

        -- " flow|babylon|typescript|css|less|scss|json|graphql|markdown or empty string
        -- " (let prettier choose).
        -- " default: ''
        -- let g:prettier#config#parser = ''

        -- " cli-override|file-override|prefer-file
        -- " default: 'file-override'
        -- let g:prettier#config#config_precedence = 'file-override'

        -- " always|never|preserve
        -- " default: 'preserve'
        -- let g:prettier#config#prose_wrap = 'preserve'

        -- " css|strict|ignore
        -- " default: 'css'
        -- let g:prettier#config#html_whitespace_sensitivity = 'css'

        -- " false|true
        -- " default: 'false'
        -- let g:prettier#config#require_pragma = 'false'

        -- " Define the flavor of line endings
        -- " lf|crlf|cr|all
        -- " defaut: 'lf'
        -- let g:prettier#config#end_of_line = get(g:, 'prettier#config#end_of_line', 'lf')
    end
}
